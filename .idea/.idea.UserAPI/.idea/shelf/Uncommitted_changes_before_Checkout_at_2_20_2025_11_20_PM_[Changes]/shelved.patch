Index: UserAPI/Controllers/AdminController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.IdentityModel.Tokens.Jwt;\r\nusing System.Security.Claims;\r\nusing Microsoft.IdentityModel.Tokens;\r\nusing MongoDB.Bson;\r\nusing MongoDB.Driver;\r\nusing UserAPI.Models;\r\nusing System.Text;\r\n\r\nnamespace AdminAPI.Controllers;\r\n\r\npublic class AdminController\r\n{\r\n    private readonly IMongoCollection<Admin> adminCollection;\r\n    private readonly IMongoCollection<User> userCollection;\r\n    //private readonly IMongoCollection<Chat> chatCollection;\r\n    private readonly JwtSettings jwtSettings;\r\n\r\n    public AdminController(JwtSettings jwtSettings)\r\n    {\r\n        this.jwtSettings = jwtSettings;\r\n        var connectionString = Environment.GetEnvironmentVariable(\"CONNECTION_STRING\");\r\n        var client = new MongoClient(connectionString);\r\n        var database = client.GetDatabase(\"AdminAPI\");\r\n        adminCollection = database.GetCollection<Admin>(\"Admins\");\r\n        userCollection = database.GetCollection<User>(\"Users\");\r\n        //chatCollection = database.GetCollection<Chat>(\"Chats\");\r\n    }\r\n\r\n    public string HashPassword(string password)\r\n    {\r\n        return BCrypt.Net.BCrypt.HashPassword(password);\r\n    }\r\n\r\n    public async Task CreateAdmin(Admin admin)\r\n    {\r\n        admin.Id = ObjectId.GenerateNewId();\r\n        admin.Password = HashPassword(admin.Password);\r\n        await adminCollection.InsertOneAsync(admin);\r\n    }\r\n\r\n    public async Task<Admin?> GetAdmin(string userName)\r\n    {\r\n        var filter = Builders<Admin>.Filter.Eq(\"UserName\", userName);\r\n        return await adminCollection.Find(filter).FirstOrDefaultAsync();\r\n    }\r\n\r\n    public async Task<string?> LogIn(string userName, string password)\r\n    {\r\n        var admin = await GetAdmin(userName);\r\n        password = password.Trim();\r\n        if (admin != null)\r\n        {\r\n            Console.WriteLine($\"Input Password: {password}\");\r\n            Console.WriteLine($\"Stored Password: {admin.Password}\");\r\n            Console.WriteLine($\"Password Match: {BCrypt.Net.BCrypt.Verify(password, admin.Password)}\");\r\n\r\n            if (BCrypt.Net.BCrypt.Verify(password, admin.Password))\r\n            {\r\n                return GenerateJwtToken(admin);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public async Task<bool> ChangePassword(string id, string newPassword, string token)\r\n    {\r\n        var adminIdFromToken = ValidateToken(token);\r\n\r\n        if (adminIdFromToken != id)\r\n        {\r\n            throw new UnauthorizedAccessException(\"You are not authorized to change this password.\");\r\n        }\r\n\r\n        var objectId = ObjectId.Parse(id);\r\n        var filter = Builders<Admin>.Filter.Eq(a => a.Id, objectId);\r\n        var hashedPassword = HashPassword(newPassword);\r\n        var update = Builders<Admin>.Update.Set(a => a.Password, hashedPassword);\r\n        var result = await adminCollection.UpdateOneAsync(filter, update);\r\n        return result.ModifiedCount > 0;\r\n    }\r\n\r\n    public async Task DeleteAdmin(string username, string password, string token)\r\n    {\r\n        var adminIdFromToken = ValidateToken(token);\r\n\r\n        var admin = await GetAdmin(username);\r\n        if (admin == null || !BCrypt.Net.BCrypt.Verify(password, admin.Password))\r\n        {\r\n            throw new UnauthorizedAccessException(\"Invalid username or password.\");\r\n        }\r\n\r\n        if (admin.Id.ToString() != adminIdFromToken)\r\n        {\r\n            throw new UnauthorizedAccessException(\"You are not authorized to delete this admin.\");\r\n        }\r\n\r\n        var filter = Builders<Admin>.Filter.Eq(a => a.Id, admin.Id);\r\n        await adminCollection.DeleteOneAsync(filter);\r\n    }\r\n\r\n    public async Task DeleteUser(string userId, string token)\r\n    {\r\n        ValidateAdminToken(token);\r\n\r\n        var objectId = ObjectId.Parse(userId);\r\n        var filter = Builders<User>.Filter.Eq(u => u.Id, objectId);\r\n        await userCollection.DeleteOneAsync(filter);\r\n    }\r\n\r\n    // public async Task<List<Chat>> GetUserChats(string userId, string token)\r\n    // {\r\n    //     ValidateAdminToken(token);\r\n    //\r\n    //     var objectId = ObjectId.Parse(userId);\r\n    //     var filter = Builders<Chat>.Filter.Eq(c => c.UserId, objectId);\r\n    //     return await chatCollection.Find(filter).ToListAsync();\r\n    // }\r\n\r\n    public async Task<User?> GetUser(string userId, string token)\r\n    {\r\n        ValidateAdminToken(token);\r\n\r\n        var objectId = ObjectId.Parse(userId);\r\n        var filter = Builders<User>.Filter.Eq(u => u.Id, objectId);\r\n        return await userCollection.Find(filter).FirstOrDefaultAsync();\r\n    }\r\n\r\n    public async Task<bool> UpdateUser(string userId, User updatedUser, string token)\r\n    {\r\n        ValidateAdminToken(token);\r\n\r\n        var objectId = ObjectId.Parse(userId);\r\n        var filter = Builders<User>.Filter.Eq(u => u.Id, objectId);\r\n        var update = Builders<User>.Update\r\n            .Set(u => u.Email, updatedUser.Email)\r\n            .Set(u => u.Password, HashPassword(updatedUser.Password));\r\n        var result = await userCollection.UpdateOneAsync(filter, update);\r\n        return result.ModifiedCount > 0;\r\n    }\r\n\r\n    private string GenerateJwtToken(Admin admin)\r\n    {\r\n        var tokenHandler = new JwtSecurityTokenHandler();\r\n        var key = Encoding.ASCII.GetBytes(jwtSettings.Secret);\r\n\r\n        var tokenDescriptor = new SecurityTokenDescriptor\r\n        {\r\n            Subject = new ClaimsIdentity(new[]\r\n            {\r\n                new Claim(ClaimTypes.NameIdentifier, admin.Id.ToString()),\r\n                new Claim(ClaimTypes.Name, admin.UserName),\r\n                new Claim(ClaimTypes.Role, \"Admin\") // Add role claim for admin\r\n            }),\r\n            Expires = DateTime.UtcNow.AddMinutes(jwtSettings.ExpirationInMinutes),\r\n            Issuer = jwtSettings.Issuer,\r\n            Audience = jwtSettings.Audience,\r\n            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)\r\n        };\r\n\r\n        var token = tokenHandler.CreateToken(tokenDescriptor);\r\n        return tokenHandler.WriteToken(token);\r\n    }\r\n\r\n    public string ValidateToken(string token)\r\n    {\r\n        var tokenHandler = new JwtSecurityTokenHandler();\r\n        var key = Encoding.ASCII.GetBytes(jwtSettings.Secret);\r\n\r\n        try\r\n        {\r\n            var principal = tokenHandler.ValidateToken(token, new TokenValidationParameters\r\n            {\r\n                ValidateIssuerSigningKey = true,\r\n                IssuerSigningKey = new SymmetricSecurityKey(key),\r\n                ValidateIssuer = true,\r\n                ValidIssuer = jwtSettings.Issuer,\r\n                ValidateAudience = true,\r\n                ValidAudience = jwtSettings.Audience,\r\n                ValidateLifetime = true\r\n            }, out SecurityToken validatedToken);\r\n\r\n            return principal.FindFirstValue(ClaimTypes.NameIdentifier);\r\n        }\r\n        catch (Exception)\r\n        {\r\n            throw new UnauthorizedAccessException(\"Invalid or expired token.\");\r\n        }\r\n    }\r\n\r\n    private void ValidateAdminToken(string token)\r\n    {\r\n        var tokenHandler = new JwtSecurityTokenHandler();\r\n        var key = Encoding.ASCII.GetBytes(jwtSettings.Secret);\r\n\r\n        try\r\n        {\r\n            var principal = tokenHandler.ValidateToken(token, new TokenValidationParameters\r\n            {\r\n                ValidateIssuerSigningKey = true,\r\n                IssuerSigningKey = new SymmetricSecurityKey(key),\r\n                ValidateIssuer = true,\r\n                ValidIssuer = jwtSettings.Issuer,\r\n                ValidateAudience = true,\r\n                ValidAudience = jwtSettings.Audience,\r\n                ValidateLifetime = true\r\n            }, out SecurityToken validatedToken);\r\n\r\n            var role = principal.FindFirstValue(ClaimTypes.Role);\r\n            if (role != \"Admin\")\r\n            {\r\n                throw new UnauthorizedAccessException(\"You are not authorized to perform this action.\");\r\n            }\r\n        }\r\n        catch (Exception)\r\n        {\r\n            throw new UnauthorizedAccessException(\"Invalid or expired token.\");\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/UserAPI/Controllers/AdminController.cs b/UserAPI/Controllers/AdminController.cs
--- a/UserAPI/Controllers/AdminController.cs	(revision 326dccd4b1710d71d2a6b9309d0181fa0087b78a)
+++ b/UserAPI/Controllers/AdminController.cs	(date 1740118819296)
@@ -12,7 +12,7 @@
 {
     private readonly IMongoCollection<Admin> adminCollection;
     private readonly IMongoCollection<User> userCollection;
-    //private readonly IMongoCollection<Chat> chatCollection;
+    private readonly IMongoCollection<Chat> chatCollection;
     private readonly JwtSettings jwtSettings;
 
     public AdminController(JwtSettings jwtSettings)
@@ -23,7 +23,7 @@
         var database = client.GetDatabase("AdminAPI");
         adminCollection = database.GetCollection<Admin>("Admins");
         userCollection = database.GetCollection<User>("Users");
-        //chatCollection = database.GetCollection<Chat>("Chats");
+        chatCollection = database.GetCollection<Chat>("Chats");
     }
 
     public string HashPassword(string password)
@@ -106,15 +106,6 @@
         await userCollection.DeleteOneAsync(filter);
     }
 
-    // public async Task<List<Chat>> GetUserChats(string userId, string token)
-    // {
-    //     ValidateAdminToken(token);
-    //
-    //     var objectId = ObjectId.Parse(userId);
-    //     var filter = Builders<Chat>.Filter.Eq(c => c.UserId, objectId);
-    //     return await chatCollection.Find(filter).ToListAsync();
-    // }
-
     public async Task<User?> GetUser(string userId, string token)
     {
         ValidateAdminToken(token);
@@ -132,6 +123,7 @@
         var filter = Builders<User>.Filter.Eq(u => u.Id, objectId);
         var update = Builders<User>.Update
             .Set(u => u.Email, updatedUser.Email)
+            .Set(u => u.Email, updatedUser.Email)
             .Set(u => u.Password, HashPassword(updatedUser.Password));
         var result = await userCollection.UpdateOneAsync(filter, update);
         return result.ModifiedCount > 0;
@@ -186,7 +178,7 @@
         }
     }
 
-    private void ValidateAdminToken(string token)
+    internal void ValidateAdminToken(string token)
     {
         var tokenHandler = new JwtSecurityTokenHandler();
         var key = Encoding.ASCII.GetBytes(jwtSettings.Secret);
